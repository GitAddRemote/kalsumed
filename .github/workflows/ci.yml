name: Build & Health-Check Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Build & Health-Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Generate .env.dev from template and Secrets
        run: |
          cp apps/backend/.env.template apps/backend/.env.dev
          sed -i "s|POSTGRES_USER=.*|POSTGRES_USER=${{ secrets.POSTGRES_USER }}|" .env.dev
          sed -i "s|POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}|" .env.dev
          sed -i "s|POSTGRES_DB=.*|POSTGRES_DB=${{ secrets.POSTGRES_DB }}|" .env.dev
          sed -i "s|REDIS_PASSWORD=.*|REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}|" .env.dev
          sed -i "s|RABBITMQ_USER=.*|RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}|" .env.dev
          sed -i "s|RABBITMQ_PASSWORD=.*|RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}|" .env.dev
          sed -i "s|JWT_SECRET=.*|JWT_SECRET=${{ secrets.JWT_SECRET }}|" .env.dev
          sed -i "s|NODE_ENV=.*|NODE_ENV=${{ secrets.NODE_ENV }}|" .env.dev

      - name: Build & start dev stack
        run: docker compose --env-file apps/backend/.env.dev -f docker-compose.dev.yml up -d --build

      - name: Wait for backend health endpoint
        run: |
          for i in {1..60}; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health) || true
            if [ "$HTTP" = "200" ]; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "‚è≥ waiting for health... ($i/60)"
            sleep 2
          done
          echo "‚ùå Health endpoint never became ready"

          echo "\nüìå Docker compose logs for debugging:"
          docker compose -f docker-compose.dev.yml logs backend

          exit 1

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Assert health payload
        run: |
          curl -s http://localhost:3000/api/health | jq .
          curl -s http://localhost:3000/api/health \
            | jq -e '
                .status                     == "ok" and
                .info.database.status       == "up" and
                .info.redis.status          == "up"
              '

      - name: Tear down dev stack
        if: always()
        run: docker compose -f docker-compose.dev.yml down -v --remove-orphans
