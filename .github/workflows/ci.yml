name: Build & Health-Check Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# allow PR comments from tools like gitleaks (optional but recommended)
permissions:
  contents: read
  id-token: write
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint Backend
        run: pnpm --filter @kalsumed/backend run lint

      - name: Lint Frontend
        run: pnpm --filter @kalsumed/frontend run lint
      # - name: Run unit tests
      #   run: pnpm test:unit

  test:
    needs: lint-and-unit
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - name: Checkout (full history for scans)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies (for any local scripts)
        run: pnpm install --frozen-lockfile

      - name: Generate backend .env.dev
        run: |
          {
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}";
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}";
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}";
            echo "DATABASE_HOST=database";
            echo "DATABASE_PORT=5432";
            echo "DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@database:5432/${{ secrets.POSTGRES_DB }}";
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}";
            echo "REDIS_HOST=redis";
            echo "REDIS_PORT=6379";
            echo "REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@redis:6379";
            echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}";
            echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}";
            echo "RABBITMQ_HOST=rabbitmq";
            echo "RABBITMQ_PORT=5672";
            echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}";
            echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}";
            echo "NODE_ENV=development";
          } > apps/backend/.env.dev
          chmod 600 apps/backend/.env.dev

      - name: Generate frontend .env.development
        run: |
          mkdir -p apps/frontend
          {
            echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}";
          } > apps/frontend/.env.development
          chmod 600 apps/frontend/.env.development

      - name: Build & start dev stack
        run: docker compose --env-file apps/backend/.env.dev -f docker-compose.dev.yml up -d --build

      - name: Wait for backend health endpoint
        run: |
          attempts=120
          url=http://localhost:3000/api/health
          for i in $(seq 1 $attempts); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || true)
            if [ "$code" = "200" ]; then
              echo "Health OK at attempt $i"
              exit 0
            fi
            echo "Waiting for health... ($i/$attempts) code=$code"
            sleep 2
          done
          echo "Health endpoint failed"
          docker compose -f docker-compose.dev.yml logs backend database redis || true
          exit 1

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Assert health payload
        run: |
          curl -s http://localhost:3000/api/health | jq .
          curl -s http://localhost:3000/api/health \
            | jq -e '
                .status == "ok" and
                .info.database.status == "up" and
                .info.redis.status == "up"
              '

      - name: (Optional) Run backend tests
        run: docker compose -f docker-compose.dev.yml exec -T backend pnpm test || echo "No tests step configured"

      - name: Secrets scan (Gitleaks v2)
        if: always()
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional quality-of-life settings:
          GITLEAKS_VERSION: "8.24.3"
          GITLEAKS_ENABLE_SUMMARY: "true"
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: "true"
          # GITLEAKS_CONFIG: .github/gitleaks.toml  # uncomment if you add a custom config

      - name: Tear down dev stack
        if: always()
        run: |
          docker compose -f docker-compose.dev.yml down -v --remove-orphans
          shred -u apps/backend/.env.dev || rm -f apps/backend/.env.dev
          shred -u apps/frontend/.env.development || rm -f apps/frontend/.env.development

      - name: Docker prune
        if: always()
        run: docker system prune -f
